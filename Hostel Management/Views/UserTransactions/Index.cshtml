@using Microsoft.CodeAnalysis.Differencing
@using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.Blazor
@model IEnumerable<Hostel_Management.Models.Model.UserTransaction>

@{
    ViewData["Title"] = "Transactions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="transaction-dashboard">
    <!-- Page Header -->
    <div class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">User Transactions</h1>
        <div class="d-flex">
            <button id="filterToggle" class="btn btn-light me-2">
                <i class="fas fa-filter"></i> Filters
            </button>
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-plus"></i> Actions
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionDropdown">
                    <li>
                        <a class="dropdown-item" href="@Url.Action("Create", new { id = ViewBag.Id, createdType = "receive" })">
                            <i class="fas fa-arrow-down text-success"></i> Cash In
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="@Url.Action("Create", new { id = ViewBag.Id, createdType = "send" })">
                            <i class="fas fa-arrow-up text-danger"></i> Cash Out
                        </a>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" id="exportCsv">
                            <i class="fas fa-file-csv"></i> Export CSV
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" id="printReport">
                            <i class="fas fa-print"></i> Print
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Filter Panel -->
    <div id="filterPanel" class="card shadow-sm mb-4" style="display: none;">
        <div class="card-body">
            <form id="filterForm" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Date Range</label>
                    <div class="input-group">
                        <input type="text" id="dateRangePicker" class="form-control" placeholder="Select date range">
                        <span class="input-group-text">
                            <i class="fas fa-calendar"></i>
                        </span>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Transaction Type</label>
                    <select id="transactionType" class="form-select">
                        <option value="">All Types</option>
                        <option value="Receive">Credit (Receive)</option>
                        <option value="Send">Debit (Send)</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Amount Range</label>
                    <div class="input-group">
                        <input type="number" id="minAmount" class="form-control" placeholder="Min">
                        <span class="input-group-text">to</span>
                        <input type="number" id="maxAmount" class="form-control" placeholder="Max">
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Wallet</label>
                    <select id="walletFilter" class="form-select">
                        <option value="">All Wallets</option>
                        @foreach (var wallet in Model.Select(x => x.Wallet).DistinctBy(w => w.Id))
                        {
                            <option value="@wallet.Id">@wallet.Name</option>
                        }
                    </select>
                </div>
                <div class="col-12 d-flex justify-content-end">
                    <button type="button" id="resetFilters" class="btn btn-light me-2">Reset</button>
                    <button type="button" id="applyFilters" class="btn btn-primary">Apply Filters</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Dashboard Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted fw-normal mb-0">Total Credit</h6>
                            <h3 class="fw-bold text-success mb-0">
                                @ViewBag.CurrencyCode @Model.Where(x => x.TransactionType.ToString() == "Credit").Sum(x => x.Amount).ToString("N2")
                            </h3>
                        </div>
                        <div class="icon-shape bg-light-success text-success rounded p-3">
                            <i class="fas fa-arrow-down"></i>
                        </div>
                    </div>
                    <div class="mt-3 mb-0 text-muted small">
                        <span>@Model.Count(x => x.TransactionType.ToString() == "Credit") transactions</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted fw-normal mb-0">Total Debit</h6>
                            <h3 class="fw-bold text-danger mb-0">
                                @ViewBag.CurrencyCode @Model.Where(x => x.TransactionType.ToString() == "Debit").Sum(x => x.Amount).ToString("N2")
                            </h3>
                        </div>
                        <div class="icon-shape bg-light-danger text-danger rounded p-3">
                            <i class="fas fa-arrow-up"></i>
                        </div>
                    </div>
                    <div class="mt-3 mb-0 text-muted small">
                        <span>@Model.Count(x => x.TransactionType.ToString() == "Debit") transactions</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted fw-normal mb-0">Net Balance</h6>
                            @{
                                var netAmount = Model.Where(x => x.TransactionType.ToString() == "Credit").Sum(x => x.Amount) -
                                Model.Where(x => x.TransactionType.ToString() == "Debit").Sum(x => x.Amount);
                                var textColorClass = netAmount >= 0 ? "text-primary" : "text-danger";

                               
                            }
                            <h3 class="fw-bold @textColorClass mb-0">@ViewBag.CurrencyCode @netAmount.ToString("N2")</h3>
                        </div>
                        <div class="icon-shape bg-light-primary text-primary rounded p-3">
                            <i class="fas fa-wallet"></i>
                        </div>
                    </div>
                    <div class="mt-3 mb-0 text-muted small">
                        <span>Current balance</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted fw-normal mb-0">Total Transactions</h6>
                            <h3 class="fw-bold text-dark mb-0">@Model.Count()</h3>
                        </div>
                        <div class="icon-shape bg-light-dark text-dark rounded p-3">
                            <i class="fas fa-exchange-alt"></i>
                        </div>
                    </div>
                    <div class="mt-3 mb-0 text-muted small">
                        <span>All time</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table Card -->
    <div class="card shadow-sm">
        <div class="card-header bg-white py-3">
            <h5 class="mb-0 fw-bold">Transaction History</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table id="transactionsTable" class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>#</th>
                         
                            <th>@Html.DisplayNameFor(model => model.Amount)</th>
                            <th>@Html.DisplayNameFor(model => model.TransactionType)</th>
                            <th>@Html.DisplayNameFor(model => model.Note)</th>
                            <th>@Html.DisplayNameFor(model => model.CreatedAt)</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = 1;
                        }
                        @foreach (var item in Model)
                        {
                            <tr class="transaction-row"
                            data-type="@item.TransactionType"
                            data-amount="@item.Amount"
                            data-wallet="@item.Wallet.Id"
                            data-date="@item.CreatedAt.ToString("yyyy-MM-dd")">
                                <td>@index</td>
                               
                                <td class="fw-medium">@ViewBag.CurrencyCode @item.Amount.ToString("N2")</td>
                                <td>
                                    <span class="badge @(item.TransactionType.ToString() == "Receive" ? "bg-success" : "bg-danger")">
                                        @Html.DisplayFor(modelItem => item.TransactionType)
                                    </span>
                                </td>
                                <td>@Html.DisplayFor(modelItem => item.Note)</td>
                                <td>@item.CreatedAt.ToString("MMM dd, yyyy HH:mm tt")</td>
                                <td class="text-end">
                                    <div class="dropdown">
                                        <button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("Edit", new { id = item.Id })">
                                                    <i class="fas fa-edit me-2 text-primary"></i> Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("Details", new { id = item.Id })">
                                                    <i class="fas fa-info-circle me-2 text-info"></i> Details
                                                </a>
                                            </li>
                                            <li>
                                                <hr class="dropdown-divider">
                                            </li>
                                            <li>
                                                <a class="dropdown-item text-danger" href="@Url.Action("Delete", new { id = item.Id })">
                                                    <i class="fas fa-trash me-2"></i> Delete
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer bg-white py-3">
            <nav aria-label="Transactions pagination">
                <ul class="pagination justify-content-end mb-0">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                    </li>
                    <li class="page-item active">
                        <a class="page-link" href="#">1</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="#">2</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="#">3</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="#">Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Action Buttons -->
<div class="action-buttons">
    <a href="@Url.Action("Create", new { id = ViewBag.Id, createdType = "receive" })" class="btn btn-success btn-circle">
        <i class="fas fa-arrow-down"></i>
    </a>
    <a href="@Url.Action("Create", new { id = ViewBag.Id, createdType = "send" })" class="btn btn-danger btn-circle">
        <i class="fas fa-arrow-up"></i>
    </a>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize date range picker with single month view
            $('#dateRangePicker').daterangepicker({
                opens: 'left',
                autoUpdateInput: false,
                locale: {
                    cancelLabel: 'Clear',
                    format: 'MM/DD/YYYY'
                },
                showDropdowns: true,
                ranges: {
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                maxDate: moment(),
                // Fix for showing only one month
                singleDatePicker: false,
                showCustomRangeLabel: true,
                linkedCalendars: false // This is the key fix to show only one calendar
            });

            $('#dateRangePicker').on('apply.daterangepicker', function(ev, picker) {
                $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
            });

            $('#dateRangePicker').on('cancel.daterangepicker', function(ev, picker) {
                $(this).val('');
            });

            // Toggle filter panel
            $('#filterToggle').click(function() {
                $('#filterPanel').slideToggle(300);
            });

            // Apply filters
            $('#applyFilters').click(function() {
                filterTransactions();
            });

            // Reset filters
            $('#resetFilters').click(function() {
                $('#filterForm')[0].reset();
                $('.transaction-row').show();
                updateDashboardSummary();
            });

            // Filter transactions function - FIXED to properly handle transaction types
            function filterTransactions() {
                const dateRange = $('#dateRangePicker').val();
                const transactionType = $('#transactionType').val();
                const minAmount = $('#minAmount').val() ? parseFloat($('#minAmount').val()) : 0;
                const maxAmount = $('#maxAmount').val() ? parseFloat($('#maxAmount').val()) : Infinity;
                const walletId = $('#walletFilter').val();

                let startDate, endDate;

                if (dateRange) {
                    const dates = dateRange.split(' - ');
                    startDate = moment(dates[0], 'MM/DD/YYYY');
                    endDate = moment(dates[1], 'MM/DD/YYYY').endOf('day');
                }

                $('.transaction-row').each(function() {
                    const $row = $(this);
                    // Fix: Get the badge text content for transaction type
                    const rowType = $row.find('td:eq(3) .badge').text().trim();
                    const rowAmount = parseFloat($row.data('amount'));
                    const rowWallet = $row.data('wallet').toString();
                    const rowDate = moment($row.data('date'));

                    let showRow = true;

                    // Filter by date range
                    if (dateRange && (rowDate < startDate || rowDate > endDate)) {
                        showRow = false;
                    }

                    // Filter by transaction type - FIXED to match dropdown values with badge text
                    if (transactionType && transactionType !== '') {
                        // Check if the selected type matches the row type
                        if (transactionType === 'Receive' && rowType !== 'Credit') {
                            showRow = false;
                        } else if (transactionType === 'Send' && rowType !== 'Debit') {
                            showRow = false;
                        }
                    }

                    // Filter by amount range
                    if (rowAmount < minAmount || rowAmount > maxAmount) {
                        showRow = false;
                    }

                    // Filter by wallet
                    if (walletId && rowWallet !== walletId) {
                        showRow = false;
                    }

                    $row.toggle(showRow);
                });

                updateDashboardSummary();
            }

            // Update dashboard summary based on visible rows
            function updateDashboardSummary() {
                let totalCredit = 0;
                let totalDebit = 0;
                let totalTransactions = 0;

                $('.transaction-row:visible').each(function() {
                    const $row = $(this);
                    // Fix: Get the badge text content
                    const rowType = $row.find('td:eq(3) .badge').text().trim();
                    const rowAmount = parseFloat($row.data('amount'));

                    if (rowType === 'Credit') {
                        totalCredit += rowAmount;
                    } else if (rowType === 'Debit') {
                        totalDebit += rowAmount;
                    }

                    totalTransactions++;
                });

                const netAmount = totalCredit - totalDebit;
                const netClass = netAmount >= 0 ? 'text-primary' : 'text-danger';

                // Update the dashboard cards
                $('.card:eq(0) h3').text('$' + totalCredit.toFixed(2));
                $('.card:eq(0) .mt-3 span').text(
                    $('.transaction-row:visible').filter(function() {
                        return $(this).find('td:eq(3) .badge').text().trim() === 'Credit';
                    }).length + ' transactions'
                );

                $('.card:eq(1) h3').text('$' + totalDebit.toFixed(2));
                $('.card:eq(1) .mt-3 span').text(
                    $('.transaction-row:visible').filter(function() {
                        return $(this).find('td:eq(3) .badge').text().trim() === 'Debit';
                    }).length + ' transactions'
                );

                $('.card:eq(2) h3').removeClass('text-primary text-danger').addClass(netClass).text('$' + netAmount.toFixed(2));

                $('.card:eq(3) h3').text(totalTransactions);
            }

            // Export to CSV
            $('#exportCsv').click(function(e) {
                e.preventDefault();

                let csvContent = "data:text/csv;charset=utf-8,";
                csvContent += "ID,Wallet,Amount,Type,Note,Date\n";

                $('.transaction-row:visible').each(function() {
                    const $row = $(this);
                    const cells = $row.find('td');

                    const id = $(cells[0]).text();
                    const wallet = $(cells[1]).text();
                    const amount = $(cells[2]).text().replace('$', '');
                    const type = $(cells[3]).text().trim();
                    const note = $(cells[4]).text();
                    const date = $(cells[5]).text();

                    csvContent += `${id},"${wallet}",${amount},"${type}","${note}","${date}"\n`;
                });

                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "transactions_export.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });

            // Professional PDF Report Generation
            $('#printReport').click(function(e) {
                e.preventDefault();
                generateProfessionalPDF();
            });

            function generateProfessionalPDF() {
                // Show loading indicator
                $('body').append('<div id="pdfLoading" class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-white bg-opacity-75" style="z-index:9999"><div class="spinner-border text-primary" role="status"></div><span class="ms-2">Generating PDF...</span></div>');

                // Get date range for report title
                const dateRange = $('#dateRangePicker').val() || 'All Time';
                const reportTitle = dateRange !== 'All Time' ? `Transaction Report (${dateRange})` : 'Transaction Report (All Time)';

                // Get visible transactions
                const visibleTransactions = [];
                $('.transaction-row:visible').each(function() {
                    const $row = $(this);
                    const cells = $row.find('td');

                    visibleTransactions.push({
                        id: $(cells[0]).text(),
                        wallet: $(cells[1]).text(),
                        amount: $(cells[2]).text(),
                        type: $(cells[3]).text().trim(),
                        note: $(cells[4]).text(),
                        date: $(cells[5]).text()
                    });
                });

                // Create PDF document
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                // Add header
                doc.setFontSize(18);
                doc.setTextColor(113, 75, 103); // Primary color
                doc.text('Hostel Management System', 105, 20, { align: 'center' });

                doc.setFontSize(14);
                doc.text(reportTitle, 105, 30, { align: 'center' });

                // Add date and time of generation
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                const now = new Date();
                doc.text(`Generated: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`, 105, 40, { align: 'center' });

                // Add summary section
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                doc.text('Summary', 14, 55);

                doc.setDrawColor(200, 200, 200);
                doc.line(14, 58, 196, 58);

                // Calculate summary data
                const totalCredit = parseFloat($('.card:eq(0) h3').text().replace('$', ''));
                const totalDebit = parseFloat($('.card:eq(1) h3').text().replace('$', ''));
                const netBalance = parseFloat($('.card:eq(2) h3').text().replace('$', ''));
                const totalTransactions = parseInt($('.card:eq(3) h3').text());

                // Add summary table
                doc.setFontSize(10);
                doc.text('Total Credit:', 20, 68);
                doc.text(`$${totalCredit.toFixed(2)}`, 70, 68);

                doc.text('Total Debit:', 20, 76);
                doc.text(`$${totalDebit.toFixed(2)}`, 70, 76);

                doc.text('Net Balance:', 20, 84);
                doc.text(`$${netBalance.toFixed(2)}`, 70, 84);

                doc.text('Total Transactions:', 20, 92);
                doc.text(`${totalTransactions}`, 70, 92);

                // Add transactions table
                doc.setFontSize(12);
                doc.text('Transaction Details', 14, 110);
                doc.line(14, 113, 196, 113);

                // Table headers
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                doc.text('ID', 15, 122);
                doc.text('Wallet', 30, 122);
                doc.text('Amount', 80, 122);
                doc.text('Type', 110, 122);
                doc.text('Note', 130, 122);
                doc.text('Date', 170, 122);

                doc.line(14, 125, 196, 125);

                // Table rows
                let y = 133;
                doc.setTextColor(0, 0, 0);

                visibleTransactions.forEach((transaction, index) => {
                    // Add new page if needed
                    if (y > 270) {
                        doc.addPage();
                        y = 20;

                        // Add header to new page
                        doc.setFontSize(10);
                        doc.setTextColor(100, 100, 100);
                        doc.text('ID', 15, y);
                        doc.text('Wallet', 30, y);
                        doc.text('Amount', 80, y);
                        doc.text('Type', 110, y);
                        doc.text('Note', 130, y);
                        doc.text('Date', 170, y);

                        doc.line(14, y + 3, 196, y + 3);
                        y += 11;
                        doc.setTextColor(0, 0, 0);
                    }

                    // Set color for transaction type
                    if (transaction.type === 'Credit') {
                        doc.setTextColor(40, 167, 69); // Green
                    } else {
                        doc.setTextColor(220, 53, 69); // Red
                    }
                    doc.text(transaction.type, 110, y);
                    doc.setTextColor(0, 0, 0);

                    // Other columns
                    doc.text(transaction.id, 15, y);

                    // Truncate wallet name if too long
                    const walletName = transaction.wallet.length > 20 ?
                        transaction.wallet.substring(0, 17) + '...' : transaction.wallet;
                    doc.text(walletName, 30, y);

                    doc.text(transaction.amount, 80, y);

                    // Truncate note if too long
                    const note = transaction.note.length > 15 ?
                        transaction.note.substring(0, 12) + '...' : transaction.note;
                    doc.text(note, 130, y);

                    doc.text(transaction.date, 170, y);

                    // Add light gray line between rows
                    if (index < visibleTransactions.length - 1) {
                        doc.setDrawColor(240, 240, 240);
                        doc.line(14, y + 3, 196, y + 3);
                    }

                    y += 8;
                });

                // Add footer
                const pageCount = doc.internal.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setFontSize(8);
                    doc.setTextColor(150, 150, 150);
                    doc.text(`Page ${i} of ${pageCount}`, 196, 285, { align: 'right' });
                    doc.text('© Hostel Management System', 14, 285);
                }

                // Save the PDF
                doc.save('transaction_report.pdf');

                // Remove loading indicator
                $('#pdfLoading').remove();
            }
        });
    </script>
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css">
    <style>
        /* Modern minimalistic styles */
        :root {
            --primary-color: #714B67;
            --primary-hover: #5D3E56;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --light-success: #e6f7e9;
            --light-danger: #fbe7e9;
            --light-primary: #f0e8f0;
            --light-dark: #f1f1f1;
            --border-color: #e9ecef;
            --text-muted: #6c757d;
            --card-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        body {
            font-family: 'Inter', 'Roboto', sans-serif;
            background-color: #f8f9fa;
            color: #212529;
        }

        .transaction-dashboard {
            padding: 1.5rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-header h1 {
            color: var(--primary-color);
            font-weight: 600;
            letter-spacing: -0.02em;
        }

        /* Card styling */
        .card {
            border: none;
            border-radius: 0.75rem;
            box-shadow: var(--card-shadow);
            transition: transform 0.2s, box-shadow 0.2s;
            overflow: hidden;
        }

            .card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            padding: 1.25rem 1.5rem;
        }

            .card-header h5 {
                margin: 0;
                color: #333;
                font-weight: 600;
            }

        .card-body {
            padding: 1.5rem;
        }

        /* Icon styling */
        .icon-shape {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 12px;
        }

        /* Button styling */
        .btn {
            font-weight: 500;
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

            .btn-primary:hover, .btn-primary:focus {
                background-color: var(--primary-hover);
                border-color: var(--primary-hover);
                box-shadow: 0 0 0 0.2rem rgba(113, 75, 103, 0.25);
            }

        .btn-light {
            background-color: #fff;
            border-color: #e9ecef;
            color: #495057;
        }

            .btn-light:hover {
                background-color: #f8f9fa;
                border-color: #dde2e6;
                color: #212529;
            }

        /* Table styling */
        .table {
            color: #212529;
            margin-bottom: 0;
        }

            .table thead th {
                background-color: #f8f9fa;
                color: var(--text-muted);
                font-weight: 500;
                text-transform: uppercase;
                font-size: 0.7rem;
                letter-spacing: 0.5px;
                border-top: none;
                border-bottom: 1px solid var(--border-color);
                padding: 0.75rem 1rem;
            }

            .table tbody tr {
                border-bottom: 1px solid var(--border-color);
            }

            .table tbody td {
                padding: 1rem;
                vertical-align: middle;
            }

            .table tbody tr:hover {
                background-color: rgba(113, 75, 103, 0.03);
            }

        /* Badge styling */
        .badge {
            padding: 0.4em 0.65em;
            font-weight: 500;
            border-radius: 6px;
            font-size: 0.75rem;
        }

        .bg-success {
            background-color: var(--light-success) !important;
            color: var(--success-color) !important;
        }

        .bg-danger {
            background-color: var(--light-danger) !important;
            color: var(--danger-color) !important;
        }

        /* Filter panel styling */
        #filterPanel {
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .form-label {
            color: var(--text-muted);
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border-color: var(--border-color);
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
        }

            .form-control:focus, .form-select:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.25rem rgba(113, 75, 103, 0.15);
            }

        .input-group-text {
            background-color: #fff;
            border-color: var(--border-color);
        }

        /* Action buttons */
        .action-buttons {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            z-index: 1000;
        }

        .btn-circle {
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .btn-circle:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
            }

            .btn-circle i {
                font-size: 1.25rem;
            }

        /* Pagination styling */
        .pagination {
            margin-bottom: 0;
        }

        .page-link {
            color: var(--primary-color);
            border: 1px solid var(--border-color);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
        }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        /* Date range picker customization */
        .daterangepicker {
            border-radius: 0.5rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            border: none;
            font-family: 'Inter', 'Roboto', sans-serif;
        }

            .daterangepicker .calendar-table {
                border-radius: 0.5rem;
            }

            .daterangepicker td.active, .daterangepicker td.active:hover {
                background-color: var(--primary-color);
            }

            .daterangepicker .ranges li.active {
                background-color: var(--primary-color);
            }

        /* Loading indicator */
        #pdfLoading {
            background-color: rgba(255,255,255,0.8);
            backdrop-filter: blur(4px);
        }

        /* Responsive adjustments */
      
        .card-body {
            padding: 1rem;
        }

        .table thead th, .table tbody td {
            padding: 0.75rem;
        }

        .action-buttons {
            bottom: 1rem;
            right: 1rem;
        }

        .btn-circle {
            width: 3rem;
            height: 3rem;
        }

        

        /* Print styles */
         .print {
            .action-buttons, .btn, .dropdown, #filterToggle, .page-header .d-flex

        {
            display: none !important;
        }

        .card {
            box-shadow: none !important;
            border: 1px solid #ddd !important;
            break-inside: avoid;
        }

        .transaction-dashboard {
            padding: 0 !important;
        }

        body {
            background-color: white !important;
        }

        }
    </style>
}